// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../../../../node_modules/@prisma/client/lingo"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DB_DIRECT_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

enum TicketStatusEnum {
  OPEN
  IN_PROGRESS
  ON_HOLD
  CLOSED
}

enum SeverityEnum {
  LOW
  MEDIUM
  HIGH
}

enum TicketActionTypeEnum {
  STATUS_CHANGE
  DESCRIPTION_UPDATE
  ASSIGNMENT_CHANGE
  COMMENT_ADDED
  PRIORITY_CHANGE
}

model Department {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams Team[]
}

model Team {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members      User[]
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?     @db.Uuid

  components Component[]
  Tickets    Ticket[]
}

model Component {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?  @db.Uuid
}

model Ticket {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String

  status   TicketStatusEnum @default(OPEN)
  severity SeverityEnum     @default(LOW)

  callerId String @db.Uuid
  caller   User   @relation(name: "TicketCaller", fields: [callerId], references: [id])

  assigneeId String? @db.Uuid
  assignee   User?   @relation(name: "TicketAssignee", fields: [assigneeId], references: [id])

  team           Team?            @relation(fields: [teamId], references: [id])
  teamId         String?          @db.Uuid
  Comment        Comment[]
  TicketHistory  TicketHistory[]
  TicketFollower TicketFollower[]

  ticketNumber String @unique
}

model Comment {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id])

  ticketId String @db.Uuid
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}

model TicketHistory {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now())

  ticketId String @db.Uuid
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  actionType TicketActionTypeEnum
  oldValue   String?
  newValue   String?
}

model TicketFollower {
  id        String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String   @db.Uuid
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id              String           @id @unique @db.Uuid
  email           String           @unique
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Team            Team?            @relation(fields: [teamId], references: [id])
  teamId          String?          @db.Uuid
  createdTickets  Ticket[]         @relation(name: "TicketCaller")
  assignedTickets Ticket[]         @relation(name: "TicketAssignee")
  Comment         Comment[]
  TicketHistory   TicketHistory[]
  TicketFollower  TicketFollower[]
}

model TicketNumber {
  currentNumber String @unique
}
